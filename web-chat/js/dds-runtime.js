// Generated by CoffeeScript 1.7.1
(function() {
  var Runtime, drt, z_,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  drt = dds.runtime;

  z_ = coffez;

  Runtime = (function() {
    function Runtime() {
      this.onRcvWorkerMessage = __bind(this.onRcvWorkerMessage, this);
      this.onSendWorkerMessage = __bind(this.onSendWorkerMessage, this);
      this.onCtrlWorkerMessage = __bind(this.onCtrlWorkerMessage, this);
      this.writeData = __bind(this.writeData, this);
      this.closeDataWriter = __bind(this.closeDataWriter, this);
      this.closeDataReader = __bind(this.closeDataReader, this);
      this.closeTopic = __bind(this.closeTopic, this);
      this.createTopic = __bind(this.createTopic, this);
      this.createDataReader = __bind(this.createDataReader, this);
      this.createDataWriter = __bind(this.createDataWriter, this);
      this.connect = __bind(this.connect, this);
      this.generateEntityId = __bind(this.generateEntityId, this);
      this.sn = 0;
      this.eidCount = 0;
      this.drmap = {};
      this.dwmap = {};
      this.onconnect = function(evt) {};
      this.onclose = function(evt) {};
      this.ondisconnect = function(evt) {};
      this.connected = false;
      this.closed = false;
      this.ctrlWorker = new Worker('js/control-link.js');
      this.sendWorker = new Worker('js/writer-link.js');
      this.rcvWorker = new Worker('js/reader-link.js');
      this.ctrlWorker.onmessage = this.onCtrlWorkerMessage;
      this.sendWorker.onmessage = this.onSendWorkerMessage;
      this.rcvWorker.onmessage = this.onRcvWorkerMessage;
      this.server = "disconnected";
    }

    Runtime.prototype.generateEntityId = function() {
      var id;
      id = this.eidCount;
      this.eidCount += 1;
      return id;
    };

    Runtime.prototype.connect = function(srv, authToken) {
      var cmd;
      this.server = srv;
      console.log("[dds-runtime]: connect(" + this.server + ")");
      if (this.connected === false) {
        this.connected = true;
        cmd = drt.Connect(this.server, authToken);
        return this.ctrlWorker.postMessage(cmd);
      } else {
        throw "Runtime already Connected";
      }
    };

    Runtime.prototype.disconnect = function() {
      if (this.connected) {
        console.log("[dds-runtime]: disconnecting...");
        this.connected = false;
        this.ctrlWorker.postMessage(drt.Disconnect);
        this.sendWorker.postMessage(drt.Disconnect);
        this.rcvWorker.postMessage(drt.Disconnect);
      }
      return this.ondisconnect(this.server);
    };

    Runtime.prototype.createDataWriter = function(dw) {
      var cdw;
      console.log("Setup DataWriter: " + dw.eid);
      this.dwmap[dw.eid] = dw;
      cdw = drt.CreateDataWriter(dw.topic, dw.qos, dw.eid);
      return this.ctrlWorker.postMessage(cdw);
    };

    Runtime.prototype.createDataReader = function(dr) {
      var cdr;
      console.log("Seettin up DR with eid = " + dr.eid);
      this.drmap[dr.eid] = dr;
      cdr = drt.CreateDataReader(dr.topic, dr.qos, dr.eid);
      return this.ctrlWorker.postMessage(cdr);
    };

    Runtime.prototype.createTopic = function(t) {};

    Runtime.prototype.closeTopic = function(t) {};

    Runtime.prototype.closeDataReader = function(dr) {};

    Runtime.prototype.closeDataWriter = function(dw) {};

    Runtime.prototype.writeData = function(dw, s) {
      var cmd, data, sdata;
      data = Array.isArray(s) ? s : [s];
      sdata = JSON.stringify(data);
      cmd = drt.WriteData(sdata, dw.eid);
      return this.sendWorker.postMessage(cmd);
    };

    Runtime.prototype.onCtrlWorkerMessage = function(evt) {
      var cmd, e;
      e = evt.data;
      switch (false) {
        case !z_.match(e.h, drt.ConnectedRuntimeEvt):
          console.log(">> Runtime Connected.");
          return this.onconnect(e);
        case !z_.match(e.h, drt.DisconnectedRuntimeEvt):
          console.log(">> Runtime Disconnected.");
          return this.ondisconnect(e);
        case !z_.match(e.h, drt.CreatedDataReaderEvt):
          console.log("DataReader created with eid = " + e.eid);
          cmd = drt.ConnectDataReader(e.url, e.eid);
          return this.rcvWorker.postMessage(cmd);
        case !z_.match(e.h, drt.CreatedDataWriterEvt):
          console.log("DataWriter created with eid = " + e.eid);
          cmd = drt.ConnectDataWriter(e.url, e.eid);
          return this.sendWorker.postMessage(cmd);
        case !z_.match(e.h, drt.WriteLogCmd):
          return console.log("Log[" + e.kind + "]: " + e.msg);
        default:
          return console.log("Driver received invalid command from CtrlWorker");
      }
    };

    Runtime.prototype.onSendWorkerMessage = function(evt) {
      var e;
      e = evt.data;
      switch (false) {
        case !z_.match(e.h, drt.ConnectedDataWriterEvt):
          return this.dwmap[e.eid].onconnect(e);
        case !z_.match(e.h, drt.DisconnectedDataWriterEvt):
          return this.dwmap[e.eid].ondisconnect(e);
        case !z_.match(e.h, drt.WriteLogCmd):
          return console.log("Log[" + e.kind + "]: " + e.msg);
        default:
          return console.log("Driver received invalid command from SendWorker");
      }
    };

    Runtime.prototype.onRcvWorkerMessage = function(evt) {
      var e;
      e = evt.data;
      switch (false) {
        case !z_.match(e.h, drt.ConnectedDataReaderEvt):
          this.drmap[e.eid].onconnect(e);
          break;
        case !z_.match(e.h, drt.DisconnectedDataReaderEvt):
          this.drmap[e.eid].ondisconnect(e);
          break;
        case !z_.match(e.h, drt.DataAvailableEvt):
          this.drmap[e.eid].onDataAvailable(e.data);
          break;
        case !z_.match(e.h, drt.WriteLogCmd):
          console.log("Log[" + e.kind + "]: " + e.msg);
          break;
        default:
          console.log("Driver Received Invalid Command from ReceiveWorker");
      }
      return {
        close: (function(_this) {
          return function() {};
        })(this),
        isConnected: (function(_this) {
          return function() {
            return _this.connected;
          };
        })(this),
        isClosed: (function(_this) {
          return function() {
            return _this.closed;
          };
        })(this)
      };
    };

    return Runtime;

  })();

  dds.runtime.Runtime = Runtime;

}).call(this);
