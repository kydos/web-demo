// Generated by CoffeeScript 1.7.1
(function() {
  var ControlLink, CreateDataReaderMsg, CreateDataWriterMsg, Header, TopicInfo, WireMessage, controlLink, drt, konsole, root, z_;

  importScripts('coffez.js', 'config.js', 'control-commands.js');


  /*
    Wire  Protocol Messages
   */

  root = this;

  z_ = coffez;

  drt = dds.runtime;

  Header = function(c, k, s) {
    return {
      cid: c,
      ek: k,
      sn: s
    };
  };

  TopicInfo = function(domainId, topic, qos) {
    return {
      did: domainId,
      tn: topic.tname,
      tt: topic.ttype,
      qos: qos.policies
    };
  };

  WireMessage = function(cmdId, kind) {
    return function(seqn, topic, qos) {
      return {
        h: Header(cmdId, kind, seqn),
        b: TopicInfo(topic.did, topic, qos)
      };
    };
  };

  CreateDataReaderMsg = WireMessage(drt.CommandId.Create, drt.EntityKind.DataReader);

  CreateDataWriterMsg = WireMessage(drt.CommandId.Create, drt.EntityKind.DataWriter);

  konsole = {};

  konsole.log = function(msg) {
    var cmd;
    cmd = drt.WriteLog(drt.EntityKind.Worker, msg);
    return root.postMessage(cmd);
  };

  ControlLink = (function() {
    function ControlLink() {
      this.connected = false;
      this.closed = false;
      this.socket = z_.None;
      this.ctrlSock = z_.None;
      this.server = "";
      this.authToken = "";
      this.sn = 0;
      this.drmap = {};
      this.dwmap = {};
    }

    ControlLink.prototype.connect = function(url, atoken) {
      var endpoint, pendingCtrlSock, webSocket;
      if (this.connected === false) {
        this.server = url;
        this.authToken = atoken;
        endpoint = drt.controllerURL(this.server) + '/' + this.authToken;
        konsole.log("Connecting to: " + endpoint);
        this.ctrlSock = z_.None;
        webSocket = new WebSocket(endpoint);
        pendingCtrlSock = z_.Some(webSocket);
        pendingCtrlSock.map(((function(_this) {
          return function(s) {
            return s.onopen = function() {
              var evt;
              konsole.log('Connected to: ' + _this.server);
              _this.ctrlSock = pendingCtrlSock;
              _this.connected = true;
              evt = drt.OnConnectedRuntime(_this.server);
              return postMessage(evt);
            };
          };
        })(this)));
        pendingCtrlSock.map(((function(_this) {
          return function(s) {
            return s.onclose = function(evt) {
              konsole.log("The  " + _this.server + " seems to have dropped the connection.");
              _this.connected = false;
              _this.closed = true;
              _this.ctrlSock = z_.None;
              return postMessage(drt.OnDisconnectedRuntime(_this.server));
            };
          };
        })(this)));
        return pendingCtrlSock.map(((function(_this) {
          return function(s) {
            return s.onmessage = function(msg) {
              return _this.handleMessage(msg);
            };
          };
        })(this)));
      } else {
        return konsole.log("Warning: Trying to connect an already connected Runtime");
      }
    };

    ControlLink.prototype.disconnect = function() {
      if (this.connected) {
        this.connected = false;
        this.ctrlSock.map(function(s) {
          return s.close();
        });
        return this.crtSock = z_._None;
      }
    };

    ControlLink.prototype.createDataReader = function(topic, qos, eid) {
      var cmd, scmd;
      cmd = CreateDataReaderMsg(this.sn, topic, qos);
      this.drmap[this.sn] = eid;
      this.sn = this.sn + 1;
      scmd = JSON.stringify(cmd);
      return this.ctrlSock.map(function(s) {
        return s.send(scmd);
      });
    };

    ControlLink.prototype.createDataWriter = function(topic, qos, eid) {
      var cmd, scmd;
      cmd = CreateDataWriterMsg(this.sn, topic, qos);
      this.dwmap[this.sn] = eid;
      this.sn = this.sn + 1;
      scmd = JSON.stringify(cmd);
      return this.ctrlSock.map(function(s) {
        return s.send(scmd);
      });
    };

    ControlLink.prototype.createTopic = function(topic, qos, eid) {};

    ControlLink.prototype.handleMessage = function(s) {
      var evt, guid, msg, url;
      konsole.log("CtrlWorker Received messasge from server:" + s.data);
      msg = JSON.parse(s.data);
      switch (false) {
        case !z_.match(msg.h, {
            cid: drt.CommandId.OK,
            ek: drt.EntityKind.DataReader
          }):
          guid = msg.b.eid;
          url = drt.readerPrefixURL(this.server) + '/' + guid;
          konsole.log("sn = " + msg.h.sn + ", eid = " + this.drmap[msg.h.sn]);
          evt = drt.OnCreatedDataReader(url, this.drmap[msg.h.sn]);
          delete this.drmap[msg.h.sn];
          return postMessage(evt);
        case !z_.match(msg.h, {
            cid: drt.CommandId.OK,
            ek: drt.EntityKind.DataWriter
          }):
          guid = msg.b.eid;
          url = drt.writerPrefixURL(this.server) + '/' + guid;
          konsole.log("sn = " + msg.h.sn + ", eid = " + this.dwmap[msg.h.sn]);
          evt = drt.OnCreatedDataWriter(url, this.dwmap[msg.h.sn]);
          delete this.dwmap[msg.h.sn];
          return postMessage(evt);
        case !z_.match(msg.h, {
            cid: drt.CommandId.OK,
            ek: drt.EntityKind.Topic
          }):
          evt = drt.OnCreatedTopic;
          return postMessage(evt);
        case !z_.match(msg.h, {
            cid: drt.CommandId.Error,
            ek: void 0
          }):
          evt = OnError(msg.h.ek, msg.b.msg);
          return postMessage(evt);
        default:
          return konsole.log("ControlLink received invalid message from server");
      }
    };

    return ControlLink;

  })();

  controlLink = new ControlLink();

  root.onmessage = function(evt) {
    var cmd;
    cmd = evt.data;
    konsole.log("CtrlWorker received cmd: " + JSON.stringify(cmd));
    switch (false) {
      case !z_.match(cmd.h, drt.ConnectCmd):
        konsole.log("[control-link]: cmd = Connect (" + cmd.url + ")");
        return controlLink.connect(cmd.url, cmd.authToken);
      case !z_.match(cmd.h, drt.CreateTopicCmd):
        return controlLink.createTopic(cmd.topic, cmd.qos, cmd.eid);
      case !z_.match(cmd.h, drt.CreateDataReaderCmd):
        konsole.log("CreateDataReader: " + cmd.eid);
        return controlLink.createDataReader(cmd.topic, cmd.qos, cmd.eid);
      case !z_.match(cmd.h, drt.CreateDataWriterCmd):
        konsole.log("CreateDataWriter: " + cmd.eid);
        return controlLink.createDataWriter(cmd.topic, cmd.qos, cmd.eid);
      case !z_.match(cmd.h, drt.Disconnect):
        return controlLink.disconnect();
      default:
        return konsole.log("Worker Received Unknown Command!");
    }
  };

}).call(this);
