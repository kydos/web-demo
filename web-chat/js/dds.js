// Generated by CoffeeScript 1.7.1
(function() {
  var ContentFilter, DSCommandId, DSEntityKind, DataCache, DataReader, DataWriter, Durability, DurabilityKind, EntityQos, History, HistoryKind, JSONTopicType, JSONTopicTypeName, JSONTopicTypeSupport, KeyValueTopicType, KeyValueTopicTypeName, Partition, PolicyId, Reliability, ReliabilityKind, TimeFilter, Topic, UserDefinedTopicTypeSupport, controllerPath, controllerURL, createCommand, createHeader, createTopicInfo, exports, isBuiltinTopicType, isJSONTopicType, isKeyValueTopicType, readerPrefixPath, readerPrefixURL, root, typesSupport, writerPrefixPath, writerPrefixURL, z_,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = this;

  z_ = coffez;

  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = dds;
    }
    exports.dds = dds;
  } else {
    root.dds = dds;
  }

  dds.VERSION = "0.1.1";

  PolicyId = {
    History: 0,
    Reliability: 1,
    Partition: 2,
    ContentFilter: 3,
    TimeFilter: 4,
    Durability: 5,
    TransportPriority: 6,
    Ownership: 7,
    OwnershipStrenght: 8
  };


  /*
     History Policy
   */

  HistoryKind = {
    KeepAll: 0,
    KeepLast: 1
  };

  History = {
    KeepAll: {
      id: PolicyId.History,
      k: HistoryKind.KeepAll
    },
    KeepLast: function(depth) {
      var result;
      result = {
        id: PolicyId.History,
        k: HistoryKind.KeepLast,
        v: depth
      };
      return result;
    }
  };


  /*
    Reliability Policy
   */

  ReliabilityKind = {
    Reliable: 0,
    BestEffort: 1
  };

  Reliability = {
    BestEffort: {
      id: PolicyId.Reliability,
      k: ReliabilityKind.BestEffort
    },
    Reliable: {
      id: PolicyId.Reliability,
      k: ReliabilityKind.Reliable
    }
  };


  /*
    Partition Policy
   */

  Partition = function() {
    var p, plist, policy;
    p = arguments[0], plist = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    policy = {
      id: PolicyId.Partition,
      vs: plist.concat(p)
    };
    return policy;
  };


  /*
    Content Filter Policy
   */

  ContentFilter = function(expr) {
    var contentFilter;
    contentFilter = {
      id: PolicyId.ContentFilter,
      v: expr
    };
    return contentFilter;
  };


  /*
    Time Filter Policy
   */

  TimeFilter = function(duration) {
    var timeFilter;
    timeFilter = {
      id: PolicyId.TimeFilter,
      v: duration
    };
    return timeFilter;
  };


  /*
    Durability Policy
   */

  DurabilityKind = {
    Volatile: 0,
    TransientLocal: 1,
    Transient: 2,
    Persistent: 3
  };

  Durability = {
    Volatile: {
      id: DurabilityKind.Volatile
    },
    TransientLocal: {
      id: DurabilityKind.TransientLocal
    },
    Transient: {
      id: DurabilityKind.Transient
    },
    Persistent: {
      id: DurabilityKind.Persistent
    }
  };


  /*
    The Entity QoS is represented as a list of Poilicies.
   */

  EntityQos = (function() {
    function EntityQos() {
      var p, ps;
      p = arguments[0], ps = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this.policies = ps.concat(p);
    }

    EntityQos.prototype.add = function() {
      var p;
      p = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return new EntityQos(this.policies.concat(p));
    };

    return EntityQos;

  })();


  /*
    Policy and QoS Exports
   */

  root.dds.HistoryKind = HistoryKind;

  root.dds.History = History;

  root.dds.ReliabilityKind = ReliabilityKind;

  root.dds.Reliability = Reliability;

  root.dds.Partition = Partition;

  root.dds.DurabilityKind = DurabilityKind;

  root.dds.Durability = Durability;

  root.dds.TimeFilter = TimeFilter;

  root.dds.ContentFilter = ContentFilter;

  root.dds.DataReaderQos = EntityQos;

  root.dds.DataWriterQos = EntityQos;

  JSONTopicTypeName = "org.omg.dds.types.JSONTopicType";

  JSONTopicType = (function() {
    function JSONTopicType(value) {
      this.value = value;
    }

    return JSONTopicType;

  })();

  KeyValueTopicType = (function() {
    function KeyValueTopicType(key, value) {
      this.key = key;
      this.value = value;
    }

    return KeyValueTopicType;

  })();

  KeyValueTopicTypeName = "org.omg.dds.types.KeyValueTopicType";

  isJSONTopicType = function(t) {
    return t.tname === JSONTopicType;
  };

  isKeyValueTopicType = function(t) {
    return t.name === KeyValueTopicType;
  };

  isBuiltinTopicType = function(t) {
    return isJSONTopicType(t) || isKeyValueTopicType(t);
  };

  JSONTopicTypeSupport = {
    id: 0,
    injectType: function(s) {
      var v;
      v = new JSONTopicType(JSON.stringify(s));
      console.log("InjectedType = " + (JSON.stringify(v)));
      return v;
    },
    extractType: function(s) {
      var v;
      v = JSON.parse(s.value);
      console.log("Extracted Type = " + v);
      return v;
    }
  };

  UserDefinedTopicTypeSupport = {
    id: 1,
    injectType: function(s) {
      return s;
    },
    extractType: function(s) {
      return s;
    }
  };

  typesSupport = [JSONTopicTypeSupport, UserDefinedTopicTypeSupport];

  Topic = (function() {
    function Topic(did, tname, ttype) {
      this.did = did;
      this.tname = tname;
      this.ttype = ttype;
      if (this.ttype === void 0) {
        this.ttype = JSONTopicTypeName;
        this.typeSupportId = JSONTopicTypeSupport.id;
      } else {
        this.typeSupportId = UserDefinedTopicTypeSupport.id;
      }
    }

    return Topic;

  })();

  DataReader = (function() {
    function DataReader(runtime, topic, qos) {
      this.runtime = runtime;
      this.topic = topic;
      this.qos = qos;
      this.close = __bind(this.close, this);
      this.onDataAvailable = __bind(this.onDataAvailable, this);
      this.removeListener = __bind(this.removeListener, this);
      this.resetStats = __bind(this.resetStats, this);
      this.handlers = [];
      this.onclose = function() {};
      this.closed = false;
      this.onconnect = function() {};
      this.ondisconnect = function() {};
      this.connected = false;
      this.eid = this.runtime.generateEntityId();
      this.runtime.createDataReader(this);
      this.receivedSamples = 0;
      this.typeSupport = typesSupport[this.topic.typeSupportId];
    }

    DataReader.prototype.resetStats = function() {
      return this.receivedSamples = 0;
    };

    DataReader.prototype.addListener = function(l) {
      var idx;
      idx = this.handlers.length;
      this.handlers = this.handlers.concat(l);
      return idx;
    };

    DataReader.prototype.removeListener = function(idx) {
      var h;
      h = this.handlers;
      return this.handlers = h.slice(0, idx).concat(h.slice(idx + 1, h.length));
    };

    DataReader.prototype.onDataAvailable = function(m) {
      var d;
      this.receivedSamples += 1;
      d = this.typeSupport.extractType(JSON.parse(m));
      return this.handlers.forEach(function(h) {
        return h(d);
      });
    };

    DataReader.prototype.close = function() {
      console.log("Closing DR " + this);
      this.closed = true;
      this.runtime.closeDataReader(this);
      return this.onclose();
    };

    return DataReader;

  })();

  DataWriter = (function() {
    function DataWriter(runtime, topic, qos) {
      this.runtime = runtime;
      this.topic = topic;
      this.qos = qos;
      this.write = __bind(this.write, this);
      this.onclose = function() {};
      this.closed = false;
      this.onconnect = function() {};
      this.ondisconnect = function() {};
      this.connected = false;
      this.eid = this.runtime.generateEntityId();
      this.runtime.createDataWriter(this);
      this.typeSupport = typesSupport[this.topic.typeSupportId];
    }

    DataWriter.prototype.write = function() {
      var ds, xs;
      ds = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      xs = ds.map((function(_this) {
        return function(s) {
          return _this.typeSupport.injectType(s);
        };
      })(this));
      return this.runtime.writeData(this, xs);
    };

    DataWriter.prototype.close = function() {
      this.closed = true;
      this.socket = new Fail("Invalid State Exception: Can't write on a closed DataWriter");
      this.runtime.closeDataWriterConnection(this);
      return this.onclose();
    };

    return DataWriter;

  })();

  root.dds.Topic = Topic;

  root.dds.DataReader = DataReader;

  root.dds.DataWriter = DataWriter;

  DataCache = (function() {
    function DataCache(depth, cache) {
      this.depth = depth;
      this.cache = cache;
      this.clear = __bind(this.clear, this);
      this.fold = __bind(this.fold, this);
      if ((this.cache != null) === false) {
        this.cache = {};
      }
      this.listeners = [];
    }

    DataCache.prototype.addListener = function(l, p) {
      var entry, predicate;
      if (predicate === void 0) {
        predicate = function(x) {
          return true;
        };
      }
      entry = {
        predicate: p,
        listener: l
      };
      return this.listeners = this.listeners.concat(entry);
    };

    DataCache.prototype.write = function(k, data) {
      var v;
      v = this.cache[k];
      if ((v != null) === false) {
        v = [data];
      } else {
        v = v.length < this.depth ? v.concat(data) : v.slice(1, v.lenght).concat(data);
      }
      this.cache[k] = v;
      return this.listeners.forEach(function(e) {
        if (e.predicate(data) === true) {
          return e.listener(data);
        }
      });
    };

    DataCache.prototype.forEachN = function(f, n) {
      var k, v, _ref, _results;
      _ref = this.cache;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        _results.push(v.slice(0, +(n - 1) + 1 || 9e9).forEach(f));
      }
      return _results;
    };

    DataCache.prototype.forEach = function(f) {
      var k, v, _ref, _results;
      _ref = this.cache;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        _results.push(v.forEach(f));
      }
      return _results;
    };

    DataCache.prototype.map = function(f) {
      var k, result, v, _ref;
      result = {};
      _ref = this.cache;
      for (k in _ref) {
        v = _ref[k];
        result[k] = v.map(f);
      }
      return new DataCache(this.depth, result);
    };

    DataCache.prototype.filter = function(f) {
      var fv, k, result, rv, v, _i, _len, _ref;
      result = {};
      _ref = this.cache;
      for (k in _ref) {
        v = _ref[k];
        for (_i = 0, _len = v.length; _i < _len; _i++) {
          fv = v[_i];
          if (f(v)) {
            rv = fv;
          }
        }
        if (rv.length !== 0) {
          result[k] = rv;
        }
      }
      return result;
    };

    DataCache.prototype.filterNot = function(f) {
      return filter(function(s) {
        return !f(s);
      });
    };

    DataCache.prototype.read = function() {
      var k, result, v, _ref;
      result = [];
      _ref = this.cache;
      for (k in _ref) {
        v = _ref[k];
        result = result.concat(v);
      }
      return result;
    };

    DataCache.prototype.readLast = function() {
      var k, result, v, _ref;
      result = [];
      _ref = this.cache;
      for (k in _ref) {
        v = _ref[k];
        result.add(v[v.length(-1)]);
      }
      return result;
    };

    DataCache.prototype.take = function() {
      var k, result, tmpCache, v;
      tmpCache = this.cache;
      this.cache = [];
      result = [];
      for (k in tmpCache) {
        v = tmpCache[k];
        result = result.concat(v);
      }
      return result;
    };

    DataCache.prototype.take = function(k) {
      var v;
      v = this.cache[k];
      this.cache[k] = [];
      if (v === void 0) {
        return z_.None;
      } else {
        return new Some(v);
      }
    };

    DataCache.prototype.takeWithFilter = function(f) {
      var e, k, result, rv, tv, v, _i, _j, _len, _len1, _ref;
      result = [];
      _ref = this.cache;
      for (k in _ref) {
        v = _ref[k];
        for (_i = 0, _len = v.length; _i < _len; _i++) {
          e = v[_i];
          if (f(e)) {
            tv = e;
          }
        }
        for (_j = 0, _len1 = v.length; _j < _len1; _j++) {
          e = v[_j];
          if (!f(e)) {
            rv = e;
          }
        }
        result = result.concat(tv);
        this.cache[k] = rv;
      }
      return result;
    };

    DataCache.prototype.get = function(k) {
      var v;
      v = this.cache[k];
      if (v === void 0) {
        return z_.None;
      } else {
        return new Some(v);
      }
    };

    DataCache.prototype.getOrElse = function(k, f) {
      var v;
      v = this.cache[k];
      if (v === void 0) {
        return f();
      } else {
        return new Some(v);
      }
    };

    DataCache.prototype.fold = function(z) {
      return (function(_this) {
        return function(f) {
          var k, r, v, _ref;
          r = z;
          _ref = _this.cache;
          for (k in _ref) {
            v = _ref[k];
            r = r + v.reduceRight(f);
          }
          return r;
        };
      })(this);
    };

    DataCache.prototype.clear = function() {
      return this.cache = {};
    };

    return DataCache;

  })();

  root.dds.bind = function(key) {
    return function(reader, cache) {
      return reader.addListener(function(d) {
        if (Array.isArray(d)) {
          return d.forEach(function(s) {
            return cache.write(key(s), s);
          });
        } else {
          return cache.write(key(d), d);
        }
      });
    };
  };

  root.dds.bindWithOnce = function(key) {
    return function(reader, cache, once) {
      var executedOnce;
      executedOnce = false;
      return reader.addListener(function(d) {
        if (executedOnce === false) {
          once(cache);
          executedOnce = true;
        }
        if (Array.isArray(d)) {
          return d.forEach(function(s) {
            return cache.write(key(s), s);
          });
        } else {
          return cache.write(key(d), d);
        }
      });
    };
  };

  root.dds.DataCache = DataCache;


  /*
    Protocol
   */

  DSEntityKind = {
    Topic: 0,
    DataReader: 1,
    DataWriter: 2
  };

  DSCommandId = {
    OK: 0,
    Error: 1,
    Create: 2,
    Delegate: 3,
    Unregister: 4
  };

  createHeader = function(c, k, s) {
    var h;
    h = {
      cid: c,
      ek: k,
      sn: s
    };
    return h;
  };

  createTopicInfo = function(domainId, topic, qos) {
    var ti;
    ti = {
      did: domainId,
      tn: topic.tname,
      tt: topic.ttype,
      qos: qos.policies
    };
    return ti;
  };

  createCommand = function(cmdId, kind) {
    return function(seqn, topic, qos) {
      var cmd, tb, th;
      th = createHeader(cmdId, kind, seqn);
      tb = createTopicInfo(topic.did, topic, qos);
      cmd = {
        h: th,
        b: tb
      };
      return cmd;
    };
  };

  root.dds.DSEntityKind = DSEntityKind;

  root.dds.DSCommandId = DSCommandId;

  root.dds.createDataReaderCommand = createCommand(DSCommandId.Create, DSEntityKind.DataReader);

  root.dds.createDataWriterCommand = createCommand(DSCommandId.Create, DSEntityKind.DataWriter);

  controllerPath = '/dscript/controller';

  readerPrefixPath = '/dscript/reader';

  writerPrefixPath = '/dscript/writer';

  controllerURL = function(dscriptServer) {
    return dscriptServer + controllerPath;
  };

  readerPrefixURL = function(dscriptServer) {
    return dscriptServer + readerPrefixPath;
  };

  writerPrefixURL = function(dscriptServer) {
    return dscriptServer + writerPrefixPath;
  };

}).call(this);
