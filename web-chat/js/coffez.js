// Generated by CoffeeScript 1.7.1
(function() {
  var CFail, CFailure, CSome, CSuccess, None, ematch, match, omatch, root;

  root = this;

  root.coffez = {};

  None = {};

  None.map = function(f) {
    return None;
  };

  None.flatMap = function(f) {
    return None;
  };

  None.get = function() {
    return void 0;
  };

  None.getOrElse = function(f) {
    return f();
  };

  None.orElse = function(f) {
    return f();
  };

  None.isEmpty = function() {
    return true;
  };

  CSome = (function() {
    function CSome(value) {
      this.value = value;
    }

    CSome.prototype.map = function(f) {
      return new CSome(f(this.value));
    };

    CSome.prototype.flatMap = function(f) {
      return f(this.value);
    };

    CSome.prototype.get = function() {
      return this.value;
    };

    CSome.prototype.getOrElse = function(f) {
      return this.value;
    };

    CSome.prototype.orElse = function(f) {
      return this;
    };

    CSome.prototype.isEmpty = function() {
      return false;
    };

    return CSome;

  })();

  CFail = (function() {
    function CFail(what) {
      this.what = what;
    }

    CFail.prototype.map = function(f) {
      throw this.what;
    };

    CFail.prototype.flatMap = function(f) {
      throw this.what;
    };

    CFail.prototype.get = function() {
      throw this.what;
    };

    CFail.prototype.getOrElse = function(f) {
      throw this.what;
    };

    CFail.prototype.orElse = function(f) {
      throw this.what;
    };

    CFail.prototype.isEmpty = function() {
      throw this.what;
    };

    return CFail;

  })();

  CSuccess = (function() {
    function CSuccess(value) {
      this.value = value;
    }

    CSuccess.prototype.map = function(f) {
      return f(this.value);
    };

    CSuccess.prototype.get = function() {
      return this.value;
    };

    CSuccess.prototype.getOrElse = function(f) {
      return this.value;
    };

    CSuccess.prototype.orElse = function(f) {
      return this;
    };

    CSuccess.prototype.isFailure = function() {
      return false;
    };

    CSuccess.prototype.isSuccess = function() {
      return true;
    };

    CSuccess.prototype.toOption = function() {
      return new CSome(this.value);
    };

    CSuccess.prototype.recover = function(f) {
      return this;
    };

    return CSuccess;

  })();

  CFailure = (function() {
    function CFailure(exception) {
      this.exception = exception;
    }

    CFailure.prototype.map = function(f) {
      return None;
    };

    CFailure.prototype.get = function() {
      return this.exception;
    };

    CFailure.prototype.getOrElse = function(f) {
      return f();
    };

    CFailure.prototype.orElse = function(f) {
      return f();
    };

    CFailure.prototype.isFailure = function() {
      return true;
    };

    CFailure.prototype.isSuccess = function() {
      return false;
    };

    CFailure.prototype.toOption = function() {
      return None;
    };

    CFailure.prototype.recover = function(f) {
      return f(this.exception);
    };

    return CFailure;

  })();

  ematch = function(x, y) {
    if (y === void 0) {
      return true;
    } else {
      return x === y;
    }
  };

  omatch = function(a, b) {
    var e, k, m, v;
    m = true;
    for (k in a) {
      v = a[k];
      e = match(v, b[k]);
      m = m && e;
    }
    return m;
  };

  match = function(a, b) {
    switch (typeof a) {
      case 'object':
        switch (typeof b) {
          case 'object':
            return omatch(a, b);
          default:
            return false;
        }
        break;
      case 'function':
        return false;
      case 'undefined':
        return false;
      default:
        switch (typeof b) {
          case 'object':
            return false;
          case 'function':
            return false;
          case 'undefined':
            return true;
          default:
            return ematch(a, b);
        }
    }
  };

  root.coffez.None = None;

  root.coffez.Some = function(value) {
    return new CSome(value);
  };

  root.coffez.Fail = function(what) {
    return new CFail(what);
  };

  root.coffez.Success = function(value) {
    return new CSuccess(value);
  };

  root.coffez.Failure = function(ex) {
    return new CFailure(ex);
  };

  root.coffez.match = match;

}).call(this);
