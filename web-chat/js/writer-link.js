// Generated by CoffeeScript 1.7.1
(function() {
  var closeConnections, drt, konsole, root, setupWriterSocket, socketMap, urlMap, z_;

  importScripts('coffez.js', 'config.js', 'control-commands.js');

  root = this;

  z_ = coffez;

  drt = dds.runtime;

  konsole = {};

  konsole.log = function(msg) {
    var cmd;
    cmd = drt.WriteLog(drt.EntityKind.Worker, msg);
    return root.postMessage(cmd);
  };

  socketMap = {};

  urlMap = {};

  setupWriterSocket = function(url, eid) {
    var socket;
    socket = new WebSocket(url);
    konsole.log("Created Websocket for DW at " + url);
    socketMap[eid] = socket;
    urlMap[eid] = url;
    socket.onopen = (function(_this) {
      return function(evt) {
        konsole.log("DW Writer Websocket is open");
        return root.postMessage(drt.OnConnectedDataWriter(url, eid));
      };
    })(this);
    return socket.onclose = (function(_this) {
      return function(evt) {
        konsole.log("DW Websocket is closed");
        delete socketMap[eid];
        return root.postMessage(drt.OnDisconnectedDataWriter(url, eid));
      };
    })(this);
  };

  closeConnections = function() {
    var eid, s, _results;
    _results = [];
    for (eid in socketMap) {
      s = socketMap[eid];
      s.close();
      _results.push(root.postMessage(drt.OnDisconnectedDataWriter(urlMap[eid], eid)));
    }
    return _results;
  };

  root.onmessage = function(evt) {
    var cmd, e, s, socket;
    cmd = evt.data;
    switch (false) {
      case !z_.match(cmd.h, drt.ConnectDataWriterCmd):
        konsole.log("Setting-up Socket for DW : " + cmd.eid + ", at " + cmd.url);
        return setupWriterSocket(cmd.url, cmd.eid);
      case !z_.match(cmd.h, drt.WriteDataCmd):
        socket = socketMap[cmd.eid];
        s = cmd.data;
        try {
          return socket.send(s);
        } catch (_error) {
          e = _error;
          konsole.log("Exception while sending data");
          return konsole.log(JSON.stringify(e));
        }
        break;
      case !z_.match(cmd.h, drt.Disconnect):
        return closeConnections();
      default:
        return konsole.log("Reader Worker Received Unknown Command!");
    }
  };

}).call(this);
