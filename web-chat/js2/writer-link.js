// Generated by CoffeeScript 1.7.1

/*
                             Vortex Web

    This software and documentation are Copyright 2010 to 2014 PrismTech
    Limited and its licensees. All rights reserved. See file:

                           docs/LICENSE.html

    for full copyright notice and license terms.
 */

(function() {
  var connected, disconnect, drt, konsole, root, setupWriterSocket, socketMap, urlMap, z_;

  importScripts('vortex-web-client.js');

  root = this;

  z_ = coffez;

  drt = dds.runtime;

  connected = false;

  konsole = {};

  konsole.log = function(msg) {
    var cmd;
    cmd = drt.WriteLog(drt.EntityKind.Worker, msg);
    return root.postMessage(cmd);
  };

  socketMap = {};

  urlMap = {};

  setupWriterSocket = function(url, eid) {
    var socket;
    socket = new WebSocket(url);
    konsole.log("Created Websocket for DW at " + url);
    socketMap[eid] = socket;
    urlMap[eid] = url;
    socket.onopen = (function(_this) {
      return function(evt) {
        konsole.log("DW Writer Websocket is open");
        return root.postMessage(drt.OnConnectedDataWriter(url, eid));
      };
    })(this);
    return socket.onclose = (function(_this) {
      return function(evt) {
        konsole.log("DW Websocket is closed");
        delete socketMap[eid];
        return root.postMessage(drt.OnDisconnectedDataWriter(url, eid));
      };
    })(this);
  };

  disconnect = function() {
    var eid, s;
    if (connected) {
      connected = false;
      for (eid in socketMap) {
        s = socketMap[eid];
        s.close();
        root.postMessage(drt.OnDisconnectedDataWriter(urlMap[eid], eid));
      }
      socketMap = {};
      return urlMap = {};
    }
  };

  root.onmessage = function(evt) {
    var cmd, e, s, socket;
    cmd = evt.data;
    switch (false) {
      case !z_.match(cmd.h, drt.ConnectDataWriterCmd):
        konsole.log("Setting-up Socket for DW : " + cmd.eid + ", at " + cmd.url);
        return setupWriterSocket(cmd.url, cmd.eid);
      case !z_.match(cmd.h, drt.WriteDataCmd):
        socket = socketMap[cmd.eid];
        s = cmd.data;
        try {
          return socket.send(s);
        } catch (_error) {
          e = _error;
          konsole.log("Exception while sending data");
          return konsole.log(JSON.stringify(e));
        }
        break;
      case !z_.match(cmd.h, drt.Disconnect):
        return disconnect();
      default:
        return konsole.log("Reader Worker Received Unknown Command!");
    }
  };

}).call(this);
