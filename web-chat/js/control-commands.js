// Generated by CoffeeScript 1.7.1
(function() {
  var Close, CloseCmd, CloseDataReader, CloseDataReaderCmd, CloseDataWriter, CloseDataWriterCmd, CommandId, Connect, ConnectCmd, ConnectDataReader, ConnectDataReaderCmd, ConnectDataWriter, ConnectDataWriterCmd, ConnectedDataReaderEvt, ConnectedDataWriterEvt, ConnectedRuntimeEvt, CreateDataReader, CreateDataReaderCmd, CreateDataWriter, CreateDataWriterCmd, CreateEntity, CreateTopic, CreateTopicCmd, CreatedDataReaderEvt, CreatedDataTopicEvt, CreatedDataWriterEvt, CreatedDataWriterEvt2, DataAvailableEvt, Disconnect, DisconnectCmd, DisconnectedDataReaderEvt, DisconnectedDataWriterEvt, DisconnectedRuntimeEvt, EntityKind, ErrorEvt, EventHeader, EventId, Header, OnConnectedDataReader, OnConnectedDataWriter, OnConnectedRuntime, OnCreatedDataReader, OnCreatedDataWriter, OnCreatedTopic, OnDataAvailable, OnDisconnectedDataReader, OnDisconnectedDataWriter, OnDisconnectedRuntime, OnError, WriteData, WriteDataCmd, WriteLog, WriteLogCmd, root;

  root = this;

  CommandId = {
    OK: 0,
    Error: 1,
    Create: 2,
    Connect: 3,
    Disconnect: 4,
    Close: 5,
    Write: 6,
    Log: 7
  };

  EventId = {
    Error: 0,
    Connected: 1,
    Disconnected: 2,
    DataAvailable: 3,
    Create: 4
  };

  EntityKind = {
    Topic: 0,
    DataReader: 1,
    DataWriter: 2,
    Runtime: 3,
    Worker: 4
  };

  root.dds.runtime.EntityKind = EntityKind;

  root.dds.runtime.CommandId = CommandId;

  root.dds.runtime.EventId = EventId;

  Header = function(cmd, ek) {
    return {
      cid: cmd,
      kind: ek
    };
  };

  ConnectCmd = Header(CommandId.Connect, EntityKind.Runtime);

  Connect = function(serverURL, at) {
    return {
      h: ConnectCmd,
      url: serverURL,
      authToken: at
    };
  };

  DisconnectCmd = Header(CommandId.Disconnect, EntityKind.Runtime);

  Disconnect = {
    h: DisconnectCmd
  };

  CloseCmd = Header(CommandId.Close, EntityKind.Runtime);

  Close = {
    h: CloseCmd
  };

  CreateEntity = function(header) {
    return function(t, q, id) {
      return {
        h: header,
        topic: t,
        qos: q,
        eid: id
      };
    };
  };

  CreateTopicCmd = Header(CommandId.Create, EntityKind.Topic);

  CreateTopic = CreateEntity(CreateTopicCmd);

  CreateDataReaderCmd = Header(CommandId.Create, EntityKind.DataReader);

  CreateDataReader = CreateEntity(CreateDataReaderCmd);

  CloseDataReaderCmd = Header(CommandId.Close, EntityKind.DataReader);

  CloseDataReader = CreateEntity(CloseDataReaderCmd);

  CreateDataWriterCmd = Header(CommandId.Create, EntityKind.DataWriter);

  CreateDataWriter = CreateEntity(CreateDataWriterCmd);

  CloseDataWriterCmd = Header(CommandId.Close, EntityKind.DataWriter);

  CloseDataWriter = CreateEntity(CloseDataWriterCmd);

  root.dds.runtime.ConnectCmd = ConnectCmd;

  root.dds.runtime.Connect = Connect;

  root.dds.runtime.DisconnectCmd = DisconnectCmd;

  root.dds.runtime.Disconnect = Disconnect;

  root.dds.runtime.CloseCmd = CloseCmd;

  root.dds.runtime.Close = Close;

  root.dds.runtime.CreateTopicCmd = CreateTopicCmd;

  root.dds.runtime.CreateTopic = CreateTopic;

  root.dds.runtime.CreateDataReaderCmd = CreateDataReaderCmd;

  root.dds.runtime.CreateDataReader = CreateDataReader;

  root.dds.runtime.CreateDataWriterCmd = CreateDataWriterCmd;

  root.dds.runtime.CreateDataWriter = CreateDataWriter;

  root.dds.runtime.CloseDataReaderCmd = CloseDataReaderCmd;

  root.dds.runtime.CloseDataReader = CloseDataReader;

  root.dds.runtime.CloseDataWriterCmd = CloseDataWriterCmd;

  root.dds.runtime.CloseDataWriter = CloseDataWriter;

  ConnectDataWriterCmd = Header(CommandId.Connect, EntityKind.DataWriter);

  ConnectDataWriter = function(addr, id) {
    return {
      h: ConnectDataWriterCmd,
      url: addr,
      eid: id
    };
  };

  WriteDataCmd = Header(CommandId.Write, EntityKind.DataWriter);

  WriteData = function(s, id) {
    return {
      h: WriteDataCmd,
      data: s,
      eid: id
    };
  };

  root.dds.runtime.ConnectDataWriterCmd = ConnectDataWriterCmd;

  root.dds.runtime.ConnectDataWriter = ConnectDataWriter;

  root.dds.runtime.WriteDataCmd = WriteDataCmd;

  root.dds.runtime.WriteData = WriteData;

  ConnectDataReaderCmd = Header(CommandId.Connect, EntityKind.DataWriter);

  ConnectDataReader = function(addr, id) {
    return {
      h: ConnectDataReaderCmd,
      url: addr,
      eid: id
    };
  };

  root.dds.runtime.ConnectDataReaderCmd = ConnectDataReaderCmd;

  root.dds.runtime.ConnectDataReader = ConnectDataReader;

  EventHeader = function(id, ek) {
    return {
      eid: id,
      kind: ek
    };
  };

  ConnectedRuntimeEvt = EventHeader(EventId.Connected, EntityKind.Runtime);

  OnConnectedRuntime = function(endpoint) {
    return {
      h: ConnectedRuntimeEvt,
      url: endpoint
    };
  };

  DisconnectedRuntimeEvt = EventHeader(EventId.Disconnected, EntityKind.Runtime);

  OnDisconnectedRuntime = function(endpoint) {
    return {
      h: DisconnectedRuntimeEvt,
      url: endpoint
    };
  };

  CreatedDataReaderEvt = EventHeader(EventId.Create, EntityKind.DataReader);

  OnCreatedDataReader = function(addr, id) {
    return {
      h: CreatedDataReaderEvt,
      url: addr,
      eid: id
    };
  };

  ConnectedDataReaderEvt = EventHeader(EventId.Connected, EntityKind.DataReader);

  OnConnectedDataReader = function(addr, id) {
    return {
      h: ConnectedDataReaderEvt,
      url: addr,
      eid: id
    };
  };

  DisconnectedDataReaderEvt = EventHeader(EventId.Disconnected, EntityKind.DataReader);

  OnDisconnectedDataReader = function(addr, id) {
    return {
      h: DisconnectedDataReaderEvt,
      url: addr,
      eid: id
    };
  };

  CreatedDataWriterEvt = EventHeader(EventId.Create, EntityKind.DataWriter);

  CreatedDataWriterEvt2 = EventHeader(EventId.Create, EntityKind.DataWriter);

  OnCreatedDataWriter = function(addr, id) {
    return {
      h: CreatedDataWriterEvt,
      url: addr,
      eid: id
    };
  };

  ConnectedDataWriterEvt = EventHeader(EventId.Connected, EntityKind.DataWriter);

  OnConnectedDataWriter = function(addr, id) {
    return {
      h: ConnectedDataWriterEvt,
      url: addr,
      eid: id
    };
  };

  DisconnectedDataWriterEvt = EventHeader(EventId.Disconnected, EntityKind.DataWriter);

  OnDisconnectedDataWriter = function(addr, id) {
    return {
      h: DisconnectedDataWriterEvt,
      url: addr,
      eid: id
    };
  };

  CreatedDataTopicEvt = EventHeader(EventId.Create, EntityKind.DataTopic);

  OnCreatedTopic = {
    h: CreatedDataTopicEvt
  };

  ErrorEvt = function(ek) {
    return EventHeader(EventId.Error, ek);
  };

  OnError = function(ek, what) {
    return {
      h: ErrorEvt(ek),
      msg: what
    };
  };

  DataAvailableEvt = EventHeader(EventId.DataAvailable, EntityKind.DataReader);

  OnDataAvailable = function(d, id) {
    return {
      h: DataAvailableEvt,
      data: d,
      eid: id
    };
  };

  root.dds.runtime.ConnectedRuntimeEvt = ConnectedRuntimeEvt;

  root.dds.runtime.OnConnectedRuntime = OnConnectedRuntime;

  root.dds.runtime.DisconnectedRuntimeEvt = DisconnectedRuntimeEvt;

  root.dds.runtime.OnDisconnectedRuntime = OnDisconnectedRuntime;

  root.dds.runtime.CreatedDataTopicEvt = CreatedDataReaderEvt;

  root.dds.runtime.OnCreatedTopic = OnCreatedTopic;

  root.dds.runtime.CreatedDataReaderEvt = CreatedDataReaderEvt;

  root.dds.runtime.OnCreatedDataReader = OnCreatedDataReader;

  root.dds.runtime.ConnectedDataReaderEvt = ConnectedDataReaderEvt;

  root.dds.runtime.OnConnectedDataReader = OnConnectedDataReader;

  root.dds.runtime.DisconnectedDataReaderEvt = DisconnectedDataReaderEvt;

  root.dds.runtime.OnDisconnectedDataReader = OnDisconnectedDataReader;

  root.dds.runtime.CreatedDataWriterEvt = CreatedDataWriterEvt;

  root.dds.runtime.OnCreatedDataWriter = OnCreatedDataWriter;

  root.dds.runtime.ConnectedDataWriterEvt = ConnectedDataWriterEvt;

  root.dds.runtime.OnConnectedDataWriter = OnConnectedDataWriter;

  root.dds.runtime.DisconnectedDataWriterEvt = DisconnectedDataWriterEvt;

  root.dds.runtime.OnDisconnectedDataWriter = OnDisconnectedDataWriter;

  root.dds.runtime.DataAvailableEvt = DataAvailableEvt;

  root.dds.runtime.OnDataAvailable = OnDataAvailable;

  WriteLogCmd = Header(CommandId.Log, EntityKind.Worker);

  WriteLog = function(ek, str) {
    return {
      h: WriteLogCmd,
      kind: ek,
      msg: str
    };
  };

  root.dds.runtime.WriteLogCmd = WriteLogCmd;

  root.dds.runtime.WriteLog = WriteLog;

}).call(this);
